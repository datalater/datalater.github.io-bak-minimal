<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://datalater.github.io/</id><title>Cheo's devlog</title><subtitle>체오의 개발 블로그 Web, Frontend, Backend, Git</subtitle> <updated>2023-01-14T17:21:31+09:00</updated> <author> <name>Cheo</name> <uri>https://datalater.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://datalater.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://datalater.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2023 Cheo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>화폐 예제 실습으로 TDD의 리듬 느껴보기 - 4. 프라이버시</title><link href="https://datalater.github.io/posts/tdd-currency-4/" rel="alternate" type="text/html" title="화폐 예제 실습으로 TDD의 리듬 느껴보기 - 4. 프라이버시" /><published>2022-06-08T00:00:00+09:00</published> <updated>2022-06-08T00:00:00+09:00</updated> <id>https://datalater.github.io/posts/tdd-currency-4/</id> <content src="https://datalater.github.io/posts/tdd-currency-4/" /> <author> <name>Cheo</name> </author> <category term="TIL" /> <category term="TDD" /> <summary> 💁 프롤로그 시리즈 “화폐 예제 실습으로 TDD의 리듬 느껴보기“에서 사용되는 공통 프롤로그입니다. graph LR A[?] --&amp;gt; B[Clean code that works] 어떻게 하면 작동하는 깔끔한 코드(clean code that works)를 얻을 수 있을까요? 켄트 벡(Kent Beck)은 자동화된 테스트로 개발을 이끌어 가는 테스트 주도 개발(TDD, Test Driven Development)을 제안합니다. 과연 TDD를 하면 작동하는 깔끔한 코드를 얻을 수 있는지, 어떤 이유로 그러한지 궁금하네요. 책 테스트 주도 개발(Test Driven Development: By Example)을 읽고 실습한 내용을 정리합니다. 실습 코드 회고 TD... </summary> </entry> <entry><title>화폐 예제 실습으로 TDD의 리듬 느껴보기 - 3. 모두를 위한 평등</title><link href="https://datalater.github.io/posts/tdd-currency-3/" rel="alternate" type="text/html" title="화폐 예제 실습으로 TDD의 리듬 느껴보기 - 3. 모두를 위한 평등" /><published>2022-04-05T00:00:00+09:00</published> <updated>2022-04-05T20:37:25+09:00</updated> <id>https://datalater.github.io/posts/tdd-currency-3/</id> <content src="https://datalater.github.io/posts/tdd-currency-3/" /> <author> <name>Cheo</name> </author> <category term="TIL" /> <category term="TDD" /> <summary> 💁 프롤로그 시리즈 “화폐 예제 실습으로 TDD의 리듬 느껴보기“에서 사용되는 공통 프롤로그입니다. graph LR A[?] --&amp;gt; B[Clean code that works] 어떻게 하면 작동하는 깔끔한 코드(clean code that works)를 얻을 수 있을까요? 켄트 벡(Kent Beck)은 자동화된 테스트로 개발을 이끌어 가는 테스트 주도 개발(TDD, Test Driven Development)을 제안합니다. 과연 TDD를 하면 작동하는 깔끔한 코드를 얻을 수 있는지, 어떤 이유로 그러한지 궁금하네요. 책 테스트 주도 개발(Test Driven Development: By Example)을 읽고 실습한 내용을 정리합니다. 실습 코드 회고 TD... </summary> </entry> <entry><title>첫 셸 스크립트 만들기 (feat. 자동 로깅 스크립트)</title><link href="https://datalater.github.io/posts/first-shell-script/" rel="alternate" type="text/html" title="첫 셸 스크립트 만들기 (feat. 자동 로깅 스크립트)" /><published>2022-03-26T00:00:00+09:00</published> <updated>2022-04-10T23:57:11+09:00</updated> <id>https://datalater.github.io/posts/first-shell-script/</id> <content src="https://datalater.github.io/posts/first-shell-script/" /> <author> <name>Cheo</name> </author> <category term="TIL" /> <category term="Opensource" /> <summary> 💁 설명 요새 15분 동안 다양한 주제의 문서를 읽고 요약하는 시간을 갖고 있습니다. 주제별로 디렉토리 구조를 만들어서 정리하고 있어요. 그런데 개별 파일을 분류할 때는 편하지만, 그동안 무엇을 읽고 어떤 파일을 작성했는지 전체를 한눈에 파악하기는 어려웠습니다. 문서를 추가하거나 수정할 때마다 자동으로 로깅을 해주면 좋겠다는 생각이 들었습니다. 그래서 처음으로 셸 스크립트를 작성해서 자동 로깅을 구현했습니다. 문서를 수정할 때마다 로깅 파일을 남기는 셸 스크립트를 작성하고, pre-commit 훅으로 셸 스크립트를 자동 실행하는 과정을 정리합니다. 요구사항 정리 자동 로깅 스크립트 - [ ] git 명령어로 현재 스테이징된 파일 목록을 가져온다. - [ ] 스테이징된 파일에서 첫번째 줄을 ... </summary> </entry> <entry><title>LeetCode - Letter Combinations of a Phone Number (JavaScript)</title><link href="https://datalater.github.io/posts/dsalgo-letter-combinations/" rel="alternate" type="text/html" title="LeetCode - Letter Combinations of a Phone Number (JavaScript)" /><published>2022-03-15T00:00:00+09:00</published> <updated>2022-03-15T00:00:00+09:00</updated> <id>https://datalater.github.io/posts/dsalgo-letter-combinations/</id> <content src="https://datalater.github.io/posts/dsalgo-letter-combinations/" /> <author> <name>Cheo</name> </author> <category term="TIL" /> <category term="Algorithm" /> <summary> 💁 설명 LeetCode - 17. Letter Combinations of a Phone Number를 풀고 나서 겪었던 시행착오를 기록하고 머릿속에 있던 생각을 글로 정리하면서 복기해봅니다. DFS로 생각하기 DFS를 연습하려고 풀었던 문제였습니다. 그래서 이 문제를 어떻게 하면 DFS로 풀이할 수 있는지 중점적으로 살펴보겠습니다. 먼저 map을 만듭니다. var letterCombinations = function (digits) { const map = { 2: "abc", 3: "def", 4: "ghi", 5: "jkl", 6: "mno", 7: "pqrs", 8: "tuv", 9: "wxyz", }; }; 만약... </summary> </entry> <entry><title>프로그래머스 - 메뉴 리뉴얼 (JavaScript)</title><link href="https://datalater.github.io/posts/dsalgo-menu-renewal/" rel="alternate" type="text/html" title="프로그래머스 - 메뉴 리뉴얼 (JavaScript)" /><published>2022-03-14T00:00:00+09:00</published> <updated>2022-03-16T01:24:40+09:00</updated> <id>https://datalater.github.io/posts/dsalgo-menu-renewal/</id> <content src="https://datalater.github.io/posts/dsalgo-menu-renewal/" /> <author> <name>Cheo</name> </author> <category term="TIL" /> <category term="Algorithm" /> <summary> 💁 설명 프로그래머스 메뉴 리뉴얼 풀이를 설명합니다. 문제 전략 세우기 문자열(“ABC”)로 특정 글자 길이(2)만큼 만들 수 있는 모든 조합(“AB”, AC”, BC”)을 만드는 함수를 만든다. 문자열 배열로 특정 글자 길이(2)만큼 만들 수 있는 모든 조합을 만드는 함수를 만든다. 배열에서 요소의 빈도를 계산해서 객체({AB: 2})로 만드는 함수를 만든다. 배열에서 빈도 수가 가장 많은 요소를 구하는 함수를 만든다. 단, 빈도 수가 동일할 경우 모두 선택해야 하므로 최빈값을 담은 배열로 리턴한다. 위 내용을 간단한 할일 목록으로 정리합니다. 문자열조합("ABC", 2) = ["AB", "AC", "BC"] 문자열 배열 조합 배열에서 요소의 빈도 수를 계산... </summary> </entry> </feed>
